resume:
  path: false
  epoch: false
  reset_optimizer: false
  reset_lr: false

paths:
  # local
  data: /home/james/data/a4c3d/mva_train
  models: /home/james/data/a4c3d/models
  logs: /home/james/data/a4c3d/logs
  vis: /home/james/data/a4c3d/vis
  predictions: /home/james/data/a4c3d/predictions
  remote_path: http://89.39.141.131/scantensus-database-png-flat
  # 2d model
  2d_model: /home/james/unity-147/weights-300.pt
  keys_json: /home/james/unity-147/keys.json

data:
  n_folds: 4
  excluded_folds: []
  labels:
    id: a4c_5c_7p_multires
    format: npz
    names: ["curve-lv-endo", "curve-rv-endo", "curve-la-endo", "curve-ra-endo", "curve-lv-endo-jump", "lv-apex-endo", "lv-apex-epi", "mv-post-hinge", "mv-ant-hinge", "rv-apex-endo", "tv-ant-hinge", "tv-sep-hinge"]
  2d:
    label_generation_dim: [576, 576]
    pre_post_frames: false
    device: cuda
    data_parallel: true
    frames_per_batch: 64
    # mutli_res parameters
    multi_res: true
    upsample_labels: false  # false means 576 input -> 288; true -> 576
    dot_sd: 4
    curve_sd: 2
  3d:
    training_frames: 32
    testing_frames: 32
    mean: [0.5,]
    std: [0.25,]

training:
  # Network
  arch: unet
  device: cuda
  data_parallel: distributed  # false, local or distributed
  mixed_precision: false
  # Data settings
  n_epochs: 200
  batch_size_train: 3
  batch_size_test: 2
  n_workers: 4
  # Optimizer
  optimizer:
    type: rangerlars
    lr: 0.001
    weight_decay: false
  scheduler:
    type: ReduceLROnPlateau
    # reduce LR params
    patience: 3
    factor: 0.1
    # one cycle LR params
    one_cycle_div_factor: 25
    one_cycle_final_div_factor: 0.001  # Default 1e-4
  # Loss
  train_criterion: mseloss
  test_criterion: mseloss

transforms:
  train:
    random_start_frame: true
    img_size: [288, 288]
    randomresizedcrop: [0.5, 0.75]  # 2 floats specifying scale range
    normalize: true
    blankframes_pre: [0.1, 12]  # Chance, n_frames
    blankframes_post: [0.2, 12]  # Chance, n_frames
    grid_dropout: [0.25, false] # whether to apply, apply to mask
  test:
    random_start_frame: false
    img_size: [320, 320]
    normalize: true

output:
  # Frequency
  print_every_iter: 10  # Iterations
  vis_every_epoch: 1  # In epochs
  # Processing of predictions
  i_frame_to_display: 16  # For PNGs
  layers_to_visualise: false  # false for all
  # Pictures (TB & PNG)
  show_png: false
  write_png_folder: false
  n_visualise: 2
  n_visualise_cols: 2
  # TensorBoard
  use_tensorboard: true
  write_png_tb: true
  # Model saving
  save: 'best'  # 'best', 'improvements', 'all'
  # Videos
  write_mp4_folder: true
  colours: [[255,0,0], [0,255,0], [0,0,255], [128,128,0], [0,128,128], [128,0,128], [255,128,0], [255,0,128], [128,255,0], [0,255,128], [0,128,255], [128,0,255]]
  # Probability maps
  write_probs: false